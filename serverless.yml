# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: crisp-app
#app: your-app-name
#tenant: your-tenant-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.7
  stage: ${opt:stage, self:custom.defaultStageNames.${self:provider.environment.ENVIRONMENT}}
  region: 'us-west-2' # can be changed to a variable if we need
  apiName: crisp-API-${self:provider.stage}
  deploymentPrefix: crisp
  deploymentBucket:
    name: deploys.employee-tools.${self:custom.defaultDomain.${self:provider.environment.ENVIRONMENT}} # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      team: intangible-pigeons
  environment:
    ENVIRONMENT: ${opt:environment, opt:env, 'Development'}
    STAGE: ${self:provider.stage}

custom:
  defaultStageNames:
    Development: ${env:USER, 'master'}
    Staging: master
    Production: master
  defaultDomain:
    Development: vacasadev.io
    Staging: vacasastage.io
    Production: vacasa.io
  pythonRequirements:
    useDownloadCache: true
    useStaticCache: true
    slim: true
  wsgi:
    app: app.app

package:
  exclude:
    - "**/__pycache__/"
    - "**/.pytest_cache/"
    - "**/.serverless/"
    - "**/node_modules/"
    - "**/package*.json"

functions:
  hello:
    handler: handler.hello
  crisp:
    handler: wsgi_handler.handler
    environment:
      DARK_SKY_API_TOKEN: ${env:DARK_SKY_API_TOKEN}
      DARK_SKY_BASE_URL: ${env:DARK_SKY_BASE_URL}
    events:
      - http: 'ANY /'
      - http: 'ANY {proxy+}'

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

plugins:
  - serverless-python-requirements
  - serverless-wsgi
